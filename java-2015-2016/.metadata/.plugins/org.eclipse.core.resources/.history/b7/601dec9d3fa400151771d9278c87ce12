/**
 * 
 */
package vehicles.parking;

import java.util.LinkedList;
import java.util.List;
import automobiles.*;

/**
 * Generic class which simulates a vallet-based parking of elements which implement the 
 * {@link Vehicle Vehicle} interface.
 * @author Razvan Radu
 *
 */
public class ValletParking <T extends Vehicle>{

	private List<T> parking = new LinkedList<>();

	public ValletParking(){
		
	}
	
	
	/**
	 * Method which parks the given vehicle, computing a random distance between the vallet pickup
	 * and the actual parking spot, which will be stored and taken into account when retrieving 
	 * <p>with the {@link ValletParking#retrieveVehicle(ParkingTicket) retrieveVehicle} method.
	 * @param v a generic element, class which implements the {@link Vehicle Vehicle} interface
	 * @return a new {@link ParkingTicket ParkingTicket} for the given input element
	 * @throws IllegalArgumentException if the element already exists in the database
	 * (has been parked prior to this attempt)
	 */
	public <E extends Vehicle> ParkingTicket parkVehicle(E v){
		double kilometers = 8*Math.random();
		
		if (this.parking.contains((T)v)){
			throw new IllegalArgumentException("Cannot re-park this vehicle");
		} else {
			this.parking.add((T)v);
			v.start();
			v.drive(kilometers);
			v.stop();
			ParkingTicket ticket = new ParkingTicket(v);
			ticket.setDistance(kilometers);
			return ticket;
		}
	}
	
	/**
	 * Method which allows the retrieval of an element indicated by its parking ticket.
	 * @param ticket is a {@link ParkingTicket ParkingTicket} corresponding to an instance which implements {@link Vehicle Vehicle} 
	 * @return the element (Class which implements the {@link Vehicle Vehicle} interface) which is stored with the corresponding ticket.
	 * @throws NullPointerException in case the ticket is invalid (does not correspond to a parked {@link Vehicle Vehicle})
	 */
	public <E extends Vehicle> E retrieveVehicle(ParkingTicket ticket){
		E found=null;
		
		for(T o : this.parking){
			if (new ParkingTicket(o).equals(ticket)) {
				found = (E)o;
			}
		}
		if(null != found) {
			found.start();
			found.drive(ticket.getDistance());
			found.stop();
			return found;
		}
		else {
			throw new NullPointerException("Invalid ticket");
		}
	}
	
}
